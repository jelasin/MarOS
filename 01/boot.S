jmp near start                    ; 跳转到程序开始执行点
	
; 定义要显示的文本数据，每个字符后跟颜色属性0x07（白色字体，黑色背景）
mytext db 'C',0x07,'i',0x07,'a',0x07,'l',0x07,'l',0x07,'o',0x07,'~',0x07,\
	'^',0x07,'~',0x07
number db 0,0,0,0,0               ; 用于存储数字各位的缓冲区

start:
	mov ax,0x7c0                  ; 设置数据段基地址为0x7c00（引导扇区加载位置）
	mov ds,ax
	
	mov ax,0xb800                 ; 设置附加段基地址为0xb8000（文本模式显存起始地址）
	mov es,ax
	
	cld                           ; CLD = Clear Direction Flag（清除方向标志）
	                              ; 设置DF标志位为0，使字符串操作指令从低地址向高地址进行
	                              ; 与STD（Set Direction Flag）指令相对
	mov si,mytext                 ; 源地址指向mytext数据（DS:SI = 数据段中的文本）
	mov di,0                      ; 目标地址指向显存起始位置（ES:DI = 显存段0xB8000开始）
	mov cx,(number-mytext)        ; 计算要复制的字符串长度
	                              ; CX = 字符串长度（number标号位置 - mytext标号位置）
	                              ; 这里计算的是mytext的长度，包含所有字符和属性字节
	                              ; 注意：mytext和number之间的距离是字节数，所以直接相减即可
	                              ; 如果需要复制的字节数是偶数，则可以直接使用
	rep movsb                     ; rep movsb详解：
	                              ; - movsb指令从DS:SI复制一个字节到ES:DI
	                              ; - 复制后SI和DI自动递增1（因为cld清除了方向标志）
	                              ; - rep前缀使movsb重复执行CX次
	                              ; - 所以总共复制CX个字，即将mytext的所有数据复制到显存

	; 获取number标号的偏移地址用于数字转换演示
	mov ax,number                 ; 被除数初始化：
	                              ; AX = number标号的偏移地址（通常是一个小于65536的正整数）
	                              ; 这个地址值将被用作演示数字分解的被除数
	
	; 将数字转换为各个数位并存储
	mov bx,ax                     ; bx指向number缓冲区
	mov cx,5                      ; 设置循环5次（处理5位数字）
	mov si,10                     ; 除数设置：SI = 10（十进制转换的基数）
digit: 
	xor dx,dx                     ; 清除dx寄存器（div指令要求DX:AX作为32位被除数）
	                              ; 对于16位除法：被除数 = DX:AX（32位）
	                              ; 清除DX确保只使用AX中的16位值作为被除数
	div si                        ; DIV指令详解：
	                              ; 指令格式：div 除数
	                              ; 
	                              ; 8086 DIV指令工作原理：
	                              ; 1. 除数类型判断：
	                              ;    - 8位除数：被除数=AX(16位)，商=AL，余数=AH
	                              ;    - 16位除数：被除数=DX:AX(32位)，商=AX，余数=DX
	                              ; 
	                              ; 2. 当前操作（16位除数SI=10）：
	                              ;    - 被除数：DX:AX = 0000:AX（32位，但高16位为0）
	                              ;    - 除数：SI = 10
	                              ;    - 运算：(DX:AX) ÷ SI
	                              ;    - 商：存入AX寄存器
	                              ;    - 余数：存入DX寄存器
	                              ; 
	                              ; 3. 具体示例（假设AX初值为1234）：
	                              ;    第1次：1234 ÷ 10 → AX=123, DX=4
	                              ;    第2次：123 ÷ 10  → AX=12,  DX=3
	                              ;    第3次：12 ÷ 10   → AX=1,   DX=2
	                              ;    第4次：1 ÷ 10    → AX=0,   DX=1
	                              ;    第5次：0 ÷ 10    → AX=0,   DX=0
	                              ; 
	                              ; 4. 异常情况：
	                              ;    - 如果商超出目标寄存器范围，产生除法错误中断(INT 0)
	                              ;    - 除数为0时，产生除零错误中断(INT 0)
	mov [bx],dl                   ; 将余数（当前数位）保存到缓冲区
	                              ; DL = 余数的低8位（0-9的数字）
	                              ; 存储顺序：个位→十位→百位→千位→万位
	inc bx                        ; 指针移向下一个存储位置
	loop digit                    ; 循环处理下一位数字
	                              ; CX递减，AX作为新的被除数继续下一轮除法
	
	; 将数位转换为ASCII字符并显示到屏幕
	mov bx,number                 ; bx指向数位缓冲区起始位置
	mov si,4                      ; 从最高位开始显示（索引4到0）
show:
	mov al,[bx+si]                ; 读取当前数位
	add al,0x30                   ; 转换为ASCII字符（数字0-9对应0x30-0x39）
	mov ah,0x04                   ; 设置字符属性（红色字体，黑色背景）
	mov [es:di],ax                ; 将字符和属性写入显存
	add di,2                      ; 移动到下一个字符位置（每个字符占2字节）
	dec si                        ; 处理下一位数字
	jns show                      ; 如果si≥0则继续循环
	
	mov word [es:di],0x0744       ; 在数字后显示一个红色的字符'D'

	jmp near $                    ; 无限循环，程序停止在此

; 填充引导扇区剩余空间为0
times 510-($-$$) db 0
db 0x55,0xaa                      ; 引导扇区标志（主引导记录签名）
